{"version":3,"sources":["services/people.js","components/Persons.js","components/Filter.js","components/PersonForm.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Person","person","setPersons","setErrorMessage","name","number","onClick","window","confirm","personService","initialP","msg","error","setTimeout","catch","Persons","persons","nameFilter","filter","toLowerCase","includes","map","key","Filter","handleNameFilter","value","onChange","PersonForm","useState","newName","setNewName","newNumber","setNewNumber","useEffect","onSubmit","event","preventDefault","nameObject","similar","length","returnedPerson","concat","target","type","Notification","message","className","App","setNameFilter","errorMessage","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.febdd003.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst exterminate = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst replace = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, replace, exterminate}","import React from 'react'\r\nimport personService from '../services/people'\r\n\r\n\r\nconst Persons = ({ persons, nameFilter, setPersons, setErrorMessage}) => {\r\n    {var things = persons.filter(person => person.name.toLowerCase().includes(nameFilter.toLowerCase())).map(person => \r\n        <Person key={person.name} person={person} setPersons={setPersons} setErrorMessage={setErrorMessage} />\r\n    )}\r\n    return(things)\r\n}\r\nconst Person = ({person, setPersons, setErrorMessage}) => {\r\n    const deleteName = (id) => {\r\n        var result = window.confirm(\"are you sure you want to delete \" + person.name + \"?\");\r\n        if (result === true) {\r\n         personService\r\n            .exterminate(id)\r\n            .then(() => \r\n            personService\r\n            .getAll()\r\n            .then(initialP => {\r\n            setErrorMessage({msg: person.name + \" has been deleted\", error:false})\r\n            setTimeout(() => {\r\n                setErrorMessage(null)\r\n              }, 5000)\r\n            setPersons(initialP)\r\n        })\r\n        ) \r\n        .catch(error => {\r\n            setErrorMessage({msg: person.name + \" has already been removed\", error:true})\r\n            setTimeout(() => {\r\n                setErrorMessage(null)\r\n            }, 5000)\r\n          })\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n    <div>{person.name} {person.number} <button onClick= {() => deleteName(person.id)}>delete</button> <br></br></div>)\r\n    }\r\n\r\n\r\nexport default Persons","import React from 'react'\r\n\r\nconst Filter = ({nameFilter, handleNameFilter}) => {\r\n    return (<div>filter shown with \r\n        <input \r\n        value={nameFilter}\r\n        onChange={handleNameFilter}\r\n       /> </div>)\r\n}\r\n\r\nexport default Filter","import React, { useState, useEffect } from 'react'\r\nimport personService from '../services/people'\r\n\r\nconst PersonForm = ({persons, setPersons, setErrorMessage}) => {\r\n    const [ newName, setNewName ] = useState('')\r\n    const [ newNumber, setNewNumber ] = useState('')\r\n\r\n    useEffect(() => {\r\n        personService\r\n          .getAll()\r\n          .then(initialP => {\r\n            setPersons(initialP)\r\n          })\r\n\r\n      }, [])\r\n    \r\n     const handleNameChange = (event) => {\r\n        setNewName(event.target.value)\r\n      }\r\n    \r\n      const handleNumberChange = (event) => {\r\n        setNewNumber(event.target.value)\r\n      }\r\n    \r\n      const addName = (event) => {\r\n        event.preventDefault()\r\n        const nameObject = {\r\n          name: newName,\r\n          number: newNumber\r\n        }\r\n        \r\n        var similar = persons.filter(function(person) {\r\n          return person.name === newName\r\n        })\r\n        if (similar.length === 1) {\r\n          var result = window.confirm(newName + \"is already in the phone book are you sure you want to change their number\");\r\n          if (result === true) {\r\n            personService\r\n            .replace(similar[0].id, nameObject)\r\n            .then(() => personService\r\n              .getAll()\r\n              .then(initialP => {\r\n                setPersons(initialP)\r\n                setErrorMessage({msg:newName + ' number was changed', error:false})\r\n                setTimeout(() => {\r\n                  setErrorMessage(null)\r\n                }, 5000)\r\n                setNewName('')\r\n                setNewNumber('')\r\n              }))\r\n            }\r\n        } else {\r\n        personService\r\n          .create(nameObject)\r\n          .then(returnedPerson => {\r\n            setPersons(persons.concat(returnedPerson))\r\n            setErrorMessage({msg:newName + \" was added\", error: false})\r\n            setTimeout(() => {\r\n              setErrorMessage(null)\r\n            }, 5000)\r\n            setNewName('')\r\n            setNewNumber('')\r\n          })\r\n        }\r\n      }\r\n     \r\n      return (\r\n    <form onSubmit={addName}>\r\n          name: \r\n          <input \r\n            value={newName}\r\n            onChange={handleNameChange}\r\n           /> \r\n          <div>number: \r\n          <input \r\n            value={newNumber}\r\n            onChange={handleNumberChange}/></div>\r\n          <button type=\"submit\">save</button>\r\n        </form>\r\n      )\r\n}\r\n\r\nexport default PersonForm","import React, { useState } from 'react'\nimport Persons from './components/Persons'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport './index.css'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ nameFilter, setNameFilter ] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const handleNameFilter = (event) => {\n    setNameFilter(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <div>\n        <Notification message={errorMessage} />\n        <Filter nameFilter={nameFilter} handleNameFilter={handleNameFilter} />\n      <h2>Add new</h2>\n        <PersonForm persons={persons} setPersons={setPersons} setErrorMessage={setErrorMessage}/>\n        </div>\n        <form>\n      </form>\n      <h2>Numbers</h2>\n      <Persons persons={persons} nameFilter={nameFilter} setPersons={setPersons} setErrorMessage={setErrorMessage} />\n    </div>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  if (message.error) {\n    return (\n      <div className=\"error\">\n        {message.msg}\n      </div>\n    )\n  } else {\n    return (\n     <div className=\"success\">\n       {message.msg}\n      </div>\n  )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}